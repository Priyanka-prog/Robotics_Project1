FIRST ROBOTICS PROJECT 2021

1.Andrea Ceruti [10557963]
2.Priyanka Rajendran [10704486]

FILES AND DESCRIPTION:
we have included two packages. The first, called "project1" is the main package and all the processing for the exam is included here, the second is called "project1_calibration" and here we have the code for the estimation of the gear ratio and the apparent baseline, for every bag.
-"project1" files:
	-cfg/dynamic_rec.cfg: configuration file for dynamic reconfigure to choose between the two integration methods. 
	-launch/project_launch.launch: It is the launch file. It launches the node and the parameters of the parameter server.
	-msg/CustomOdometry.msg: custom message used to publish the odometry as requested.
	-msg/MotorSpeed.msg: custom message for the motor topics.
	-src/odometry_calculator.cpp: It is the file where we do all the processing. First It uses message filters to synchronize motor messages. Then with this data it computes and publishes the linear 		and angular velocity. At the end it computes and publishes the odometries as requested.
	-srv/ResetPose.srv: service that reset the robot pose to x = 0, y = 0, theta = 0.
	-srv/SetPose.srv: service that set the robot pose to (x,y,theta) passed with command line

-"project1_calibration": It is a package where inside there is a file called "calibration.cpp". The node created is used to estimate first the gear ratio and then the apparent baseline of the robot. We have written by hand the formula for the linear and angular velocity for skid steering approximate kinematics, developing it with the provided variables until having a formula for the velocity that is dependent on gear_ratio variable and on the motor rpm. Then by isolating the gear_ratio we were able to find an estimation of it (and similar processing has been done for angular velocity and apparent baseline). As can be seen in the file, for the estimation we have taken only the non-noisy measurements (for example, we know that the gear ratio was between 35 and 40). By doing an average of all the measured gear ratios we were able to achieve good results, as can be seen with the simulation on rviz. (The same process have been done for the apparent baseline and the angular velocity, check the file for a better comprehension). The velocities values from /scout_odom topic and the different motor rpm values from /motor_speed_x are synchronized with message filters as can be seen in the file. 
	

NAME OF THE PARAMETERS:
	-odometry_integration_type: dynamic enum for the odometry integration method, 0 is referred to Euler integration, 1 is referred to Runge-Kutta integration
	-initial_x: initial x of the robot 
	-initial_y: initial y of the robot
	-initial_theta:	initial orientation of the robot in radians

As can be seen, we have chosen to split the initial pose parameter in 3 parameters instead of a structured one. Another comment is that we have calculated the initial pose of the robot for every bag and this value is stored in the launch file. So if the user wants to use bag2 for the simulation it should put inside the launch file under the param/value field the proper value.
For the conversion from robot orientation quaternion to radians we have used this link https://www.andre-gaschler.com/rotationconverter/ provided by Paolo Cudrano.


STRUCTURE OF THE TF TREE: "odom" --> "base_link"

STRUCTURE OF THE CUSTOM MESSAGE: the custom message has this prototype (nav_msgs/Odometry odom, std_msgs/String method). Since they are predefined types we leave the user to read the documentation online.

HOW TO START NODES: 
the command "roslaunch project1 project_launch.launch" will launch an odometry_executable that is the executable generated by the odometry_calculator.cpp file. It will also launch the parameters that describe the initial pose of the robot, i.e. initial_x, initial_y, initial_theta.
We stress again that depending on the bag chosen for the simulation, the user has to put the proper values of the initial pose inside the launch file. These values have been already calculated and are present in the launch file as comment.

USEFUL INFO:
	-/calculated_valocities is the topic in which we publish the estimated linear and angular velocity of the robot
	-/calculated_odom is the topic in which we publish the estimated odometry
	-/simple_odom is the topic in which we publish the custom odometry	
	
	-To change the integration method from euler to Runge-Kutta run on terminal
	"rosrun dynamic_reconfigure dynparam set /odometry_calculator_node odometry_integration_type 1" or 
	"rosrun dynamic_reconfigure dynparam set /odometry_calculator_node odometry_integration_type rk"
 	
	-To reset the pose to (0,0) call the service reset_pose.
	"rosservice call /reset_pose"

	-To set the odometry with a given pose for example in x = 10.0, y = 10.0, theta = 3.50
	"rosservice call /set_pose 10.0 10.0 3.50"

	-We have estimated different values for the apparent baselines and also for the gear ratio depending on the bag used. The values are not so different but for a very good simulation for the bag2 		for example is better that the defines used in the code "GEAR_RATIO_BAG1" and "APPARENT_BASELINE_BAG1" are substistuted with "GEAR_RATIO_BAG2" and "APPARENT_BASELINE_BAG2".

	-Remember to change the starting values of the pose inside the launch file if a different bag is used.

	-At the end of every bag simulation time, remember to set the robot initial pose as the starting position with the values indicated in the launch file. This can be done with the proper ros service.

	-See the cpp file code in package project1_calibration to understand better our estimation and how message filters are used to get an estimation for the gear ratio and for the apparent baseline.

